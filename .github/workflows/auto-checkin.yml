name: Claude Code Session Reset Scheduler

# Claude Code Session Reset Scheduler - Optimized for work periods
# Based on ADR-001 & ADR-002: Session reset scheduling with timing optimization
# 05:23 UTC+8 -> 21:23 UTC (previous day) -> Reset at 10:23 UTC+8 (morning work period)
# 10:23 UTC+8 -> 02:23 UTC -> Reset at 15:23 UTC+8 (afternoon work period)
# 17:23 UTC+8 -> 09:23 UTC -> Reset at 22:23 UTC+8 (evening work period)
# 22:23 UTC+8 -> 14:23 UTC -> Reset at 03:23 UTC+8 next day (additional coverage)
on:
  schedule:
    # Execution times are in UTC, corresponding to Taipei time (UTC+8) at 05:23, 10:23, 17:23, 22:23
    - cron: '23 21,2,9,14 * * *'
  # Manual trigger for testing
  workflow_dispatch:

jobs:
  session-reset:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Use a token for checkout, which is required for subsequent push actions
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
        
      - name: Execute Session Reset Logic (Token 1)
        uses: anthropics/claude-code-action@beta
        continue-on-error: true
        with:
          mode: agent
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN_1 }}
          direct_prompt: |
            Execute Claude Code Session reset trigger for Token 1:
            1. Get the current UTC time and determine today's date.
            2. Based on the current date, determine the log filename in the format 'YYYYMM-session-log.csv'. 
               For example, if today is August 2024, the filename should be '202408-session-log.csv'.
            3. Check if this CSV file exists. If not, create it with the header: 'timestamp,event_type,token_id,reset_time_utc8'.
            4. Calculate the expected session reset time (current time + 5 hours, converted to UTC+8).
            5. Append a new row to the CSV file with: current UTC timestamp, 'SESSION-RESET-TRIGGER', 'TOKEN_1', and the expected UTC+8 reset time.
            IMPORTANT: Only perform file operations. Do NOT run any git commands.

      - name: Execute Session Reset Logic (Token 2)
        uses: anthropics/claude-code-action@beta
        continue-on-error: true
        with:
          mode: agent
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN_2 }}
          direct_prompt: |
            Execute Claude Code Session reset trigger for Token 2:
            1. Get the current UTC time and determine today's date.
            2. Based on the current date, determine the log filename in the format 'YYYYMM-session-log.csv'.
            3. Check if this CSV file exists. If not, create it with the header: 'timestamp,event_type,token_id,reset_time_utc8'.
            4. Calculate the expected session reset time (current time + 5 hours, converted to UTC+8).
            5. Append a new row to the CSV file with: current UTC timestamp, 'SESSION-RESET-TRIGGER', 'TOKEN_2', and the expected UTC+8 reset time.
            IMPORTANT: Only perform file operations. Do NOT run any git commands.
            
      - name: Pull, Commit, and Push changes
        run: |
          # Set a rebase strategy for pull to handle potential race conditions
          git config --global pull.rebase true
          
          # Pull the latest changes from the remote repository
          git pull origin main
          
          # Add all modified CSV files to the staging area
          git add *.csv
          
          # Check if there are any actual file changes. If so, commit and push.
          if ! git diff-index --quiet HEAD; then
            echo "Changes detected. Committing and pushing..."
            TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            git commit -m "chore(bot): Session reset trigger at $TIMESTAMP"
            # Push the changes
            git push origin main
          else
            echo "No changes to commit. Working tree clean."
          fi